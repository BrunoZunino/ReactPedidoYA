{"version":3,"sources":["images/picante.png","screens/Login/login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","email","pass","console","log","_this2","react_default","a","createElement","class","src","require","value","onChange","event","setState","target","type","id","aria-describedby","placeholder","React","Component","App","react_router_dom","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+KAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sLCqDzBC,2BAhDb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAM,CACTC,MAAO,GACPC,KAAM,IALQT,mFAUhBU,QAAQC,IAAI,6EAGN,IAAAC,EAAAT,KAIN,OAFAO,QAAQC,IAAI,UAAWR,KAAKI,MAAMC,OAClCE,QAAQC,IAAI,SAAUR,KAAKI,MAAME,MAE/BI,EAAAC,EAAAC,cAAA,OAAKC,MAAM,QACTH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,MAAM,SAASC,IAAKC,EAAQ,OAEnCL,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACTH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,SACPH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,OAAKC,MAAM,yBACTH,EAAAC,EAAAC,cAAA,SAAQI,MAAOhB,KAAKI,MAAMC,MAAOY,SAAU,SAACC,GAAWT,EAAKU,SAAS,CAACd,MAAOa,EAAME,OAAOJ,SAAWK,KAAK,QAAQR,MAAM,0BAA0BS,GAAG,qBAAqBC,mBAAiB,YAAYC,YAAY,WAEnNd,EAAAC,EAAAC,cAAA,OAAKC,MAAM,wBACXH,EAAAC,EAAAC,cAAA,SAAOI,MAAOhB,KAAKI,MAAME,KAAMW,SAAU,SAACC,GAAWT,EAAKU,SAAS,CAACb,KAAMY,EAAME,OAAOJ,SAAWK,KAAK,WAAWR,MAAM,yBAAyBS,GAAG,wBAAwBE,YAAY,cAE1Ld,EAAAC,EAAAC,cAAA,UAAQS,KAAK,SAASR,MAAM,gCAA5B,UACAH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQS,KAAK,SAASR,MAAM,mCAA5B,YAEFH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,eACTH,EAAAC,EAAAC,cAAA,UAAQS,KAAK,SAASR,MAAM,mCAA5B,YACAH,EAAAC,EAAAC,cAAA,UAAQS,KAAK,SAASR,MAAM,gCAA5B,qBAtCEY,IAAMC,YCSXC,MARf,WACE,OACEjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWpC,MCIlBqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3bde7a32.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/picante.4c5d899a.png\";","import React from 'react';\nimport styles from './login.css';\nimport ReactDOMServer from 'react-dom/server';\n\nclass Login extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state={\n      email: \"\",\n      pass: \"\",\n    };\n  }\n\n  componentDidMount() {\n    console.log('I was triggered during componentDidMount');\n  }\n\n  render(){\n    \n    console.log('email: ', this.state.email);\n    console.log('pass: ', this.state.pass);\n    return (\n      <div class=\"main\">\n        <div>\n          <img class=\"imagen\" src={require('../../images/picante.png')} />\n        </div>\n        <div class=\"container\">\n          <div class=\"login\">\n              <form>\n                <div class=\"form-group emailinput\">\n                  <input  value={this.state.email} onChange={(event) => {this.setState({email: event.target.value});}} type=\"email\" class=\"form-control emailInput\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Email\"/>\n                </div>\n                  <div class=\"form-group passInput\">\n                  <input value={this.state.pass} onChange={(event) => {this.setState({pass: event.target.value});}} type=\"password\" class=\"form-control passInput\" id=\"exampleInputPassword1\" placeholder=\"Password\"/>\n                </div>\n                <button type=\"submit\" class=\"btn btn-primary loginButton \">Log in</button>\n                <div>\n                  <button type=\"submit\" class=\"btn btn-primary registerButton \">Sign up</button>\n                </div>\n                <div class=\"plusButtons\">\n                  <button type=\"submit\" class=\"btn btn-primary facebookButton \">Facebook</button>\n                  <button type=\"submit\" class=\"btn btn-primary gmailButton \">Gmail</button>\n                </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default Login;\n","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport Login from './screens/Login/login.js';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Route path=\"/login\" component={Login} />\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}